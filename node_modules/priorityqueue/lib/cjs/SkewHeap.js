"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SkewHeap = void 0;

var _PriorityQueue2 = require("./PriorityQueue");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function createNode(value) {
  return {
    value: value,
    left: null,
    right: null
  };
}

function traverse(node) {
  if (!node) return [];
  return [].concat(_toConsumableArray(traverse(node.left)), [node.value], _toConsumableArray(traverse(node.right)));
}

function _merge(a, b, comparator) {
  if (!a || !b) return a || b;

  if (comparator(a.value, b.value) < 0) {
    return _merge(b, a, comparator);
  }

  a.right = _merge(a.right, b, comparator);
  var t = a.right;
  a.right = a.left;
  a.left = t;
  return a;
}
/**
 * An implementation of Skew Heap.
 */


var SkewHeap =
/*#__PURE__*/
function (_PriorityQueue) {
  _inherits(SkewHeap, _PriorityQueue);

  function SkewHeap() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, SkewHeap);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SkewHeap)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "root", null);

    _defineProperty(_assertThisInitialized(_this), "_length", 0);

    return _this;
  }

  _createClass(SkewHeap, [{
    key: "clear",
    value: function clear() {
      this._length = 0;
      this.root = null;
    }
  }, {
    key: "push",
    value: function push(val) {
      this.root = _merge(this.root, createNode(val), this.comparator);
      this._length += 1;
    }
  }, {
    key: "top",
    value: function top() {
      if (!this.root) {
        throw new Error("invalid operation: top() called for empty SkewHeap");
      }

      return this.root.value;
    }
  }, {
    key: "pop",
    value: function pop() {
      if (!this.root) {
        throw new Error("invalid operation: pop() called for empty SkewHeap");
      }

      var ret = this.root.value;
      this.root = _merge(this.root.right, this.root.left, this.comparator);
      this._length -= 1;
      return ret;
    }
  }, {
    key: "merge",
    value: function merge(other) {
      if (other instanceof SkewHeap && this.comparator === other.comparator) {
        this.root = _merge(this.root, other.root, this.comparator);
        this._length += other.length;
        other.clear();
        return;
      }

      for (var i = 0, a = other.toArray(), l = a.length; i < l; ++i) {
        this.push(a[i]);
      }

      other.clear();
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return traverse(this.root).sort(this.comparator);
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return !this.root;
    }
  }, {
    key: "length",
    get: function get() {
      return this._length;
    }
  }], [{
    key: "from",
    value: function from(array) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var instance = new SkewHeap(option);

      for (var i = 0, l = array.length; i < l; ++i) {
        instance.push(array[i]);
      }

      return instance;
    }
  }]);

  return SkewHeap;
}(_PriorityQueue2.PriorityQueue);

exports.SkewHeap = SkewHeap;