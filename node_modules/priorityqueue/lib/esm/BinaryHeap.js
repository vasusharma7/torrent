function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { PriorityQueue } from "./PriorityQueue";

function getLargestIndex(collection, index, comparator) {
  var leftIndex = index * 2;
  var rightIndex = index * 2 + 1;
  var largestIndex = index;
  if (leftIndex < collection.length && comparator(collection[largestIndex], collection[leftIndex]) < 0) largestIndex = leftIndex;
  if (rightIndex < collection.length && comparator(collection[largestIndex], collection[rightIndex]) < 0) largestIndex = rightIndex;
  return largestIndex;
}

function heapify(collection, index, comparator) {
  var largestIndex = getLargestIndex(collection, index, comparator);

  if (largestIndex !== index) {
    // swap current & largest
    var t = collection[index];
    collection[index] = collection[largestIndex];
    collection[largestIndex] = t;
    heapify(collection, largestIndex, comparator);
  }
}

function heapifyAll(instance) {
  for (var i = Math.floor(instance.collection.length / 2) - 1; i >= 0; --i) {
    heapify(instance.collection, i, instance.comparator);
  }
}
/**
 * An implementation of Binary Heap.
 */


export var BinaryHeap =
/*#__PURE__*/
function (_PriorityQueue) {
  _inherits(BinaryHeap, _PriorityQueue);

  function BinaryHeap() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, BinaryHeap);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BinaryHeap)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "collection", []);

    return _this;
  }

  _createClass(BinaryHeap, [{
    key: "clear",
    value: function clear() {
      this.collection.length = 0;
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return _toConsumableArray(this.collection).sort(this.comparator);
    }
  }, {
    key: "top",
    value: function top() {
      if (this.length === 0) {
        throw new Error("invalid operation: top() called for empty BinaryHeap");
      }

      return this.collection[0];
    }
  }, {
    key: "pop",
    value: function pop() {
      if (this.length === 0) {
        throw new Error("invalid operation: pop() called for empty BinaryHeap");
      }

      var ret = this.collection[0];

      if (this.collection.length > 1) {
        this.collection[0] = this.collection.pop();
        heapify(this.collection, 0, this.comparator);
      } else {
        this.collection.pop();
      }

      return ret;
    }
  }, {
    key: "push",
    value: function push(value) {
      this.collection.push(value);
      var arr = this.collection;

      for (var i = arr.length - 1, parent = Math.floor(i / 2); i > 0 && this.comparator(arr[parent], arr[i]) < 0; i = parent, parent = Math.floor(parent / 2)) {
        var t = arr[i];
        arr[i] = arr[parent];
        arr[parent] = t;
      }
    }
  }, {
    key: "merge",
    value: function merge(other) {
      if (other instanceof BinaryHeap) {
        this.collection = this.collection.concat(other.collection);
      } else {
        this.collection = this.collection.concat(other.toArray());
      }

      heapifyAll(this);
      other.clear();
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return !this.collection.length;
    }
  }, {
    key: "length",
    get: function get() {
      return this.collection.length;
    }
  }], [{
    key: "from",
    value: function from(array) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var instance = new BinaryHeap(option);
      instance.collection = Array.from(array);
      heapifyAll(instance);
      return instance;
    }
  }]);

  return BinaryHeap;
}(PriorityQueue);