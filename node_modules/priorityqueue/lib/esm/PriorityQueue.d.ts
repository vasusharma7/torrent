import { Comparator } from "./comparator";
/**
 * Option structure of Priority Queue.
 */
export declare type PriorityQueueOption<T> = {
    comparator?: Comparator<T>;
};
/**
 * An Abstract class of Priority Queue.
 */
export declare abstract class PriorityQueue<T> {
    comparator: Comparator<T>;
    /**
     * Build priority queue from given array.
     */
    static from<U>(_array: U[], _option?: PriorityQueueOption<U>): PriorityQueue<U>;
    /**
     * Constructor of Priority Queue, with the given 'comparator'.
     * 'comparator' should be same as Array.prototype.sort's argument.
     * Like this: (a, b) => (a == b ? 0 : (a < b ? -1 : 1));
     * If not, default function will be passed by PriorityQueue entrypoint.
     */
    constructor({ comparator }?: PriorityQueueOption<T>);
    /**
     * Clear this priority queue.
     */
    clear(): void;
    /**
     * Write out the priority queue content as an Array.
     */
    toArray(): T[];
    /**
     * Returns size of the priority queue.
     */
    readonly length: number;
    /**
     * Push the element to the priority queue and returns self.
     */
    push(_value: T): void;
    /**
     * Enqueue the element to the priority queue and returns self. Alias of push().
     */
    enqueue(value: T): void;
    /**
     * Get the top element of the priority queue.
     */
    top(): T;
    /**
     * Peek the top element of the priority queue. Alias of top().
     */
    peek(): T;
    /**
     * Pop the top element of the priority queue.
     */
    pop(): T;
    /**
     * Dequeue the top element of the priority queue. Alias of pop().
     */
    dequeue(): T;
    /**
     * Merge another priority queue into this.
     */
    merge(_other: PriorityQueue<T>): void;
    /**
     * Returns the priority queue is empty or not.
     */
    isEmpty(): boolean;
}
